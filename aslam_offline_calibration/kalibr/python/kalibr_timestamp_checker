#!/usr/bin/env python

import os
import sys
import sm
import copy
import math
import argparse
import signal

import numpy as np
import matplotlib.pyplot as plt

import rosbag

import kalibr_common as kc

# make numpy print prettier
np.set_printoptions(suppress=True)

def signal_exit(signal, frame):
    sm.logWarn("Shutdown requested! (CTRL+C)")
    sys.exit(2)

def parseArgs():
    class KalibrArgParser(argparse.ArgumentParser):
        def error(self,message):
            self.print_help()
            sm.logError('%s' % message)
            sys.exit(2)
        
        def format_help(self):
            formatter = self._get_formatter()
            formatter.add_text(self.description)
            formatter.add_usage(self.usage, self._actions,
                                self._mutually_exclusive_groups)
            for action_group in self._action_groups:
                formatter.start_section(action_group.title)
                formatter.add_text(action_group.description)
                formatter.add_arguments(action_group._group_actions)
                formatter.end_section()
            formatter.add_text(self.epilog)
            return formatter.format_help()
    usage = """
    Example usage to check sensor topic timestamp stability

        %(prog)s --bag MYROSBAG.bag --topics /cam0/image_raw /cam1/image_raw . """
    #setup the argument list
    parser = KalibrArgParser(description = "Check sensors topic timestamp stability", usage=usage)

    #data source
    groupSource = parser.add_argument_group('Data source')
    groupSource.add_argument('--bag', dest='bagfile', help='The bag file with the data')
    groupSource.add_argument('--topics', nargs='+', dest='topics', help='The list of image topics', required=True)
    groupSource.add_argument('--bag-from-to', metavar='bag_from_to', type=float, nargs=2, help='Use the bag data starting from up to this time [s]')

    outputSettings = parser.add_argument_group('Output options')
    outputSettings.add_argument('--verbose', action='store_true', dest='verbose', help='Enable (really) verbose output (disables plots)')
    outputSettings.add_argument('--plot', action='store_true', dest='plot', help='Plot check result')
    outputSettings.add_argument('--dont-show-report', action='store_true', dest='dontShowReport', help='Do not show the report on screen after check.')

    #print help if no argument is specified
    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(2)
    
    #Parser the argument list
    try:
        parsed = parser.parse_args()
    except:
        sys.exit(2)

    return parsed



def main():
    parsed = parseArgs()
      
    #logging modes
    if parsed.verbose:
        sm.setLoggingLevel(sm.LoggingLevel.Debug)
    else:
        sm.setLoggingLevel(sm.LoggingLevel.Info)

    #register signal handler
    signal.signal(signal.SIGINT, signal_exit)

    # topic information
    check_dict = {}
    topicList = list(parsed.topics)
    numTopic = len(parsed.topics)


    bag = rosbag.Bag(str(parsed.bagfile))
    print "\nload {} successful !!!\n".format(parsed.bagfile)

    for item in topicList:
        print "Fetch topic: {}".format(item)
        ts_gap_list = list()
        ts_before = 0
        init_flag = False
        for topic, msg, ts in bag.read_messages(topics = [item]):
            if not init_flag:
                ts_before = ts.to_nsec()
                init_flag = True
            ts_gap = abs((ts.to_nsec() - ts_before)/1e6) #ms
            ts_gap_list.append(ts_gap)
            ts_before = ts.to_nsec()

        check_dict.update({item: ts_gap_list})
    
    # print check_dict
    
    for key,value in check_dict.items():
        mean = np.mean(np.asarray(value))
        var = np.var(np.asarray(value))

        mean_list = list(np.full((len(value)),mean))
        plt.plot(mean_list,'r', label = "mean:{}".format(mean))
        plt.plot(value,'b*', label = key)
        plt.title("timestamp check result")
        plt.xlabel("frame")
        plt.ylabel("timestamp gap between two adjacent frames(ms)")
        plt.legend()
        plt.show()


if __name__ == "__main__":
    main()


